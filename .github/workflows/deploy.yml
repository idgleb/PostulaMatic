name: Deploy to Production Server

on:
  push:
    branches: [ master ]
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H 178.156.188.95 >> ~/.ssh/known_hosts
        
    - name: Deploy to server
      run: |
        ssh deploy@178.156.188.95 << "EOF"
          set -e
          
          echo "🚀 Iniciando despliegue automático..."
          
          # Navegar al directorio del proyecto
          cd /home/deploy/PostulaMatic || {
            echo "❌ Directorio del proyecto no encontrado. Clonando..."
            git clone https://github.com/idgleb/PostulaMatic.git
            cd PostulaMatic
          }
          
          # Backup de base de datos (si existe)
          echo "📦 Haciendo backup de base de datos..."
          if [ -f ".env" ] && grep -q "DATABASE_URL" .env; then
            source .env
            if command -v pg_dump &> /dev/null && [ ! -z "$DATABASE_URL" ]; then
              pg_dump "$DATABASE_URL" > backup_$(date +%Y%m%d_%H%M%S).sql
              echo "✅ Backup completado"
            else
              echo "⚠️ pg_dump no disponible, saltando backup"
            fi
          fi
          
          # Actualizar código
          echo "📥 Actualizando código desde GitHub..."
          git fetch origin
          git reset --hard origin/master
          
          # Verificar si existe .env
          if [ ! -f ".env" ]; then
            echo "⚠️ Archivo .env no encontrado. Creando desde template..."
            cp env.production.example .env
            echo "🔧 IMPORTANTE: Debes configurar manualmente el archivo .env con tus valores reales"
          fi
          
          # Detener contenedores
          echo "🛑 Deteniendo contenedores..."
          docker-compose down || true
          
          # Reconstruir contenedores
          echo "🔨 Reconstruyendo contenedores..."
          docker-compose build --no-cache
          
          # Iniciar servicios
          echo "🚀 Iniciando servicios..."
          docker-compose up -d
          
          # Esperar a que los servicios estén listos
          echo "⏳ Esperando a que los servicios estén listos..."
          sleep 15
          
          # Aplicar migraciones
          echo "🗄️ Aplicando migraciones..."
          docker-compose exec -T postulamatic_web python manage.py migrate
          
          # Recopilar archivos estáticos
          echo "📁 Recopilando archivos estáticos..."
          docker-compose exec -T postulamatic_web python manage.py collectstatic --noinput
          
          # Verificar servicios
          echo "🔍 Verificando servicios..."
          
          # Verificar web
          if curl -f -s http://localhost:8000/ > /dev/null; then
            echo "✅ Servicio web funcionando"
          else
            echo "❌ Servicio web no responde"
            exit 1
          fi
          
          # Verificar Redis
          if docker-compose exec -T redis redis-cli ping | grep -q "PONG"; then
            echo "✅ Redis funcionando"
          else
            echo "❌ Redis no responde"
            exit 1
          fi
          
          # Verificar Celery Worker
          if docker-compose ps worker | grep -q "Up"; then
            echo "✅ Celery Worker funcionando"
          else
            echo "❌ Celery Worker no está funcionando"
          fi
          
          # Limpiar imágenes no utilizadas
          echo "🧹 Limpiando imágenes Docker no utilizadas..."
          docker image prune -f
          
          echo "🎉 Despliegue completado exitosamente!"
          echo "📊 Estado de contenedores:"
          docker-compose ps
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ $? -eq 0 ]; then
          echo "✅ Despliegue exitoso"
        else
          echo "❌ Despliegue falló"
        fi
