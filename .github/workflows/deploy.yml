name: Deploy Postulamatic

on:
  push:
    branches: ["main", "master"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Preparar SSH (clave + known_hosts dinámico)
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Genera known_hosts con la huella del server (IPv4/IPv6 si aplica)
          touch ~/.ssh/known_hosts
          ssh-keyscan -H "$SERVER_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          ssh-keyscan -H -4 "$SERVER_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          ssh-keyscan -H -6 "$SERVER_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          chmod 644 ~/.ssh/known_hosts

      - name: Sincronizar código al servidor (rsync)
        run: |
          rsync -az --delete \
            --exclude ".git/" \
            --exclude "__pycache__/" \
            --exclude ".venv/" \
            --exclude "node_modules/" \
            --exclude ".env" \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/apps/postulamatic/
      

      - name: Build & restart con Docker Compose en el servidor
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
        run: |
          set -e
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            "${SERVER_USER}@${SERVER_HOST}" bash -se <<'EOSSH'
          set -euo pipefail
          cd ~/apps/postulamatic
          docker compose build --pull
          docker compose up -d
          EOSSH
      
