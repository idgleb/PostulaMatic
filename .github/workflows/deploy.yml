name: Deploy Postulamatic

on:
  push:
    branches: ["master"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Preparar SSH (key + known_hosts)
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Clave privada desde el secret (sanear \r por si se copió desde Windows)
          echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          # Generar known_hosts correcto consultando el servidor
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

          # Comprobación mínima (no imprime secretos)
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'echo SSH OK' || exit 1

      - name: Sincronizar código al servidor (rsync)
        run: |
          set -e
          RSYNC_SSH="ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes"
          rsync -az --delete \
            --rsh="$RSYNC_SSH" \
            --exclude ".git/" \
            --exclude "__pycache__/" \
            --exclude ".venv/" \
            --exclude "node_modules/" \
            --exclude ".github/" \
            ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/apps/postulamatic/

      - name: Build & restart con Docker Compose en el servidor
        run: |
          set -e
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'bash -se' <<'EOSSH'
          set -euo pipefail
          cd ~/apps/postulamatic
          docker compose build
          docker compose up -d
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOSSH
